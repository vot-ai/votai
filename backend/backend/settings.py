"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta
from .read_env import read_env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
SETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.dirname(SETTINGS_DIR)

# Get the docker secret
django_secrets = read_env(os.environ.get("SECRETS_PATH", ""), "DJANGO_SECRETS")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = django_secrets.get("SECRET_KEY", "abc123")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False").capitalize() == "True"

ALLOWED_HOSTS = eval(  # pylint: disable=eval-used
    os.environ.get("ALLOWED_HOSTS", '["localhost", "backend"]')
)

# Website root url
ROOT_URL = django_secrets.get("ROOT_URL", "http://api.localhost")


# Application definition

INSTALLED_APPS = [
    # User apps
    "apps.annotators",
    "apps.items",
    "apps.labels",
    "apps.surveys",
    "apps.main",
    "apps.rest_auth",
    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # REST and auth apps
    "rest_framework",
    "rest_framework.authtoken",
    "allauth",
    "allauth.account",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "corsheaders",
    "drf_yasg",
    # Misc
    "djcelery_email",
    # Debug
    "debug_toolbar",
    "django_extensions",
    # Monitoring apps
    "django_prometheus",
    "health_check",
    "health_check.db",
    "health_check.cache",
    # "health_check.storage",
    "health_check.contrib.celery",
    "health_check.contrib.redis",
]

MIDDLEWARE = [
    "backend.middleware.PrometheusBeforeMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "backend.middleware.PrometheusAfterMiddleware",
]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

if os.environ.get("POSTGRES_DB"):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql"
            if DEBUG
            else "django_prometheus.db.backends.postgresql",
            "NAME": os.environ.get("POSTGRES_DB"),
            "USER": os.environ.get("POSTGRES_USER"),
            "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
            "HOST": os.environ.get("POSTGRES_SERVER"),
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        }
    }

REDIS_URL = os.environ.get("REDIS_URL")

if REDIS_URL:
    # Cache backend
    CACHES = {
        "default": {
            "BACKEND": "django_redis.cache.RedisCache"
            if DEBUG
            else "django_prometheus.cache.backends.redis",
            "LOCATION": os.environ.get("REDIS_URL"),
            "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
            "KEY_PREFIX": "djangocache",
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(SETTINGS_DIR, "staticfiles")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Celery
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")

# Django Prometheus
PROMETHEUS_EXPORT_MIGRATIONS = False

# Shell plus settings
SHELL_PLUS_PRINT_SQL = True
SHELL_PLUS = "ptipython"
SHELL_PLUS_PRINT_SQL_TRUNCATE = 10000
SHELL_PLUS_SQLPARSE_FORMAT_KWARGS = dict(reindent_aligned=True, truncate_strings=10000)


# Rest Settings
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
        "dj_rest_auth.utils.JWTCookieAuthentication",
    ),
    "PAGE_SIZE": 20,
}

REST_USE_JWT = True
JWT_AUTH_COOKIE = "pairwise-jwt"
LOGOUT_ON_PASSWORD_CHANGE = False
OLD_PASSWORD_FIELD_ENABLED = True
SITE_ID = 1

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}

# Allauth settings
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

# CORS Settings
CORS_ORIGIN_ALLOW_ALL = True

DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK": lambda request: DEBUG is True,
    # Toolbar options
    "RESULTS_CACHE_SIZE": 3,
    "SHOW_COLLAPSED": True,
    # Panel options
    "SQL_WARNING_THRESHOLD": 100,  # milliseconds
}


# Documentation settings
SWAGGER_SETTINGS = {
    "DEFAULT_AUTO_SCHEMA_CLASS": "backend.swagger_schema.CustomTagAutoSchema",
    "SECURITY_DEFINITIONS": {
        "JWT": {
            "type": "http",
            "name": "Authorization",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        },
    },
}


# Email settings
EMAIL_HOST_USER = django_secrets.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = django_secrets.get("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS = eval(  # pylint: disable=eval-used
    django_secrets.get("EMAIL_USE_TLS", "True")
)
EMAIL_HOST = django_secrets.get("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(django_secrets.get("EMAIL_PORT", "587"))
DEFAULT_FROM_EMAIL = django_secrets.get("DEFAULT_FROM_EMAIL", EMAIL_HOST_USER)
DEFAULT_CONTACT_EMAIL = django_secrets.get("DEFAULT_CONTACT_EMAIL", EMAIL_HOST_USER)
SERVER_EMAIL = django_secrets.get("SERVER_EMAIL", EMAIL_HOST_USER)

ADMINS = [
    ("Admin", django_secrets.get("ADMIN_ACCOUNT")),
]

EMAIL_BACKEND = "djcelery_email.backends.CeleryEmailBackend"
